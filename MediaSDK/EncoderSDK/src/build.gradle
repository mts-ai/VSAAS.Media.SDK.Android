// Top-level build file where you can add configuration options common to all sub-projects/modules.
ext {
    cloudsdk_ver = project.hasProperty('cloudsdk_ver') ? project.getProperty('cloudsdk_ver') : "2.0.319"
    encodersdk_ver = project.hasProperty('encodersdk_ver') ? project.getProperty('encodersdk_ver') : "6.13.20230908"
}

buildscript {
   if (!project.hasProperty("art_userName") || !project.hasProperty('art_password')) {
        if (file("./art/properties").exists()) {
            def props = new Properties()
            file("./art/properties").withInputStream { props.load(it) }
            project.ext.set("art_userName", props.getProperty("art_userName"))
            project.ext.set("art_password", props.getProperty("art_password"))
        } else {
            project.ext.set("art_userName", "")
            project.ext.set("art_password", "")
        }
    }

    if (!project.hasProperty("isLocalDependencies")) {
        project.ext.set("isLocalDependencies", "")
    }
    if (!project.hasProperty("art_url")) {
        project.ext.set("art_url_encodersdk", "../../../aar")
        project.ext.set("art_url_cloudsdk", "../../../../../CloudSDK/aar")
        project.ext.set("isLocalDependencies", "true")
    }

    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.0.3'
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        if (project.isLocalDependencies.isEmpty()) {
            maven {
                credentials {
                    username project.art_userName
                    password project.art_password
                }
                url project.art_url
                allowInsecureProtocol true
            }
        } else {
            flatDir {
                dirs project.art_url_encodersdk, project.art_url_cloudsdk
            }
        }
    }
}

subprojects {
    // Force dependencies version for all subprojects
    configurations.all {
        if (project.isLocalDependencies.isEmpty()) {
            resolutionStrategy {
                force "com.vxg.mediasdk:encodersdk:$project.encodersdk_ver"
                force "com.vxg.cloudsdk:cloudsdk:$project.cloudsdk_ver"
            }
        }
    }

    // Examples apk names instead of app-debug.apk
    afterEvaluate { project ->
        if (project.hasProperty("android")) {
            project.android.applicationVariants.all { variant ->
                def appName
                //Check if an applicationName property is supplied; if not use the name of the parent project.
                if (project.hasProperty("applicationName")) {
                    appName = applicationName
                } else {
                    appName = parent.name
                }

                variant.outputs.all { output ->
                    logger.quiet("Apk name {}", "${appName}-${output.baseName}-${variant.versionName}.apk")
                    outputFileName = "${appName}-${output.baseName}-${variant.versionName}.apk"
                }
            }
        }
    }
}
